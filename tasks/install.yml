---

- name: Create Group
  group:
    name: "{{ pms_group }}"
    system: no
    state: present 
  become: true

- name: Create User
  user:
    name: "{{ pms_user }}"
    group: "{{ pms_group }}"
    state: present
    system: no
    createhome: no
    shell: /bin/false
  become: true

# Install from Repo
- block:
  
    - name: Copy PMS Yum Repo
      copy:
        src: files/plex.repo
        dest: /etc/yum.repos.d/plex.repo
        remote_src: false

    - name: Install PMS
      yum:
        pkg: plexmediaserver
        state: installed
        update_cache: yes
      become: yes

  when: pms_install_from_repo

# Install from downloaded RPM
- name: Install from URL
  yum: 
    name: "{{ pms_link }}"
    state: present
    update_cache: yes
    validate_certs: false
  become: yes
  when: not pms_install_from_repo

- name: Update service
  lineinfile:
    path: /etc/systemd/system/multi-user.target.wants/plexmediaserver.service
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
  with_items:
    - { line: '^User=*',  regexp: "User={{ pms_user }}" }
    - { line: '^Group=*', regexp: "Group={{ pms_group }}" }
  become: yes

# Restore
- block:

  - name: Get files from backup_target
    find:
      paths: "{{ pms_backup_target }}"
    register: found_files

  - name: Get latest backup file
    set_fact:
      __pms_restore_file: "{{ found_files.files | sort(attribute='mtime',reverse=true) | first  }}"

  - name: Set Fact for restore_file
    set_fact:
      pms_restore_file: "{{ __pms_restore_file.path }}"

  when: pms_restore_from_backups

# Restore from File
- name: Restore Backup --> Extract archive
  unarchive:
    src: "{{ pms_restore_file }}"
    dest: /
    copy: no
    owner: "{{ pms_user }}"
    group: "{{ pms_group }}"
  become: yes
  when: pms_restore_file is defined and pms_restore_file|default("") != ""

- name: Enable service
  service: 
    name: plexmediaserver.service
    enabled: yes
  notify: start plex